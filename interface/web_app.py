import sys  # Importation du module sys pour manipuler le chemin d'acc√®s
import os  # Importation du module os pour la gestion des fichiers et dossiers
import altair as alt  # Importation d'Altair pour la visualisation de donn√©es
import pandas as pd  # Importation de pandas pour la manipulation de donn√©es tabulaires

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))  # Ajoute le dossier parent au path pour les imports

import streamlit as st  # Importation de Streamlit pour cr√©er l'interface web
from app.video_processing import extract_frames  # Importation de la fonction d'extraction de frames
from app.emotion_detector import detect_emotions_on_image  # Importation de la d√©tection d'√©motions
from app.report_generator import ReportGenerator  # Importation du g√©n√©rateur de rapports

def main():
    st.title("D√©tection d'√âmotions Faciales (Sans Audio)")  # Titre de l'application

    uploaded_video = st.file_uploader("Uploader une vid√©o", type=["mp4"])  # Widget pour uploader une vid√©o
    if uploaded_video:
        with open("temp_video.mp4", "wb") as f:  # Ouvre un fichier temporaire pour √©crire la vid√©o upload√©e
            f.write(uploaded_video.read())  # √âcrit le contenu de la vid√©o dans le fichier

        extract_frames("temp_video.mp4", "temp_frames", fps=1)  # Extrait les frames de la vid√©o √† 1 fps

        results = []  # Liste pour stocker les r√©sultats d'√©motions par frame
        for frame_file in sorted(os.listdir("temp_frames")):  # Parcourt chaque image extraite
            res = detect_emotions_on_image(os.path.join("temp_frames", frame_file))  # D√©tecte les √©motions sur la frame
            results.append(res)  # Ajoute le r√©sultat √† la liste

        report = ReportGenerator(results, video_name="temp_video.mp4")  # Cr√©e un rapport √† partir des r√©sultats
        report.to_json("report.json")  # G√©n√®re un rapport JSON
        report.to_pdf("report.pdf")  # G√©n√®re un rapport PDF

        st.success("Rapport g√©n√©r√© avec succ√®s.")  # Affiche un message de succ√®s
        st.download_button("T√©l√©charger JSON", open("report.json", "rb"), file_name="report.json")  # Bouton de t√©l√©chargement JSON
        st.download_button("T√©l√©charger PDF", open("report.pdf", "rb"), file_name="report.pdf")  # Bouton de t√©l√©chargement PDF

        # Graphe Altair
        emotion_rows = []  # Liste pour stocker les donn√©es de chaque √©motion par frame
        for idx, r in enumerate(results):
            for emotion, score in r.get("emotions", {}).items():  # Parcourt chaque √©motion d√©tect√©e
                emotion_rows.append({"Frame": idx, "Emotion": emotion, "Score": score})  # Ajoute la donn√©e √† la liste

        df_emotions = pd.DataFrame(emotion_rows)  # Cr√©e un DataFrame pandas √† partir des donn√©es
        if not df_emotions.empty:
            st.subheader("üìà √âvolution des √©motions par frame")  # Sous-titre du graphique
            chart = alt.Chart(df_emotions).mark_line(point=True).encode(
                x=alt.X("Frame:Q", title="Num√©ro de Frame"),  # Axe X : num√©ro de frame
                y=alt.Y("Score:Q", title="Score (%)"),  # Axe Y : score de l'√©motion
                color=alt.Color("Emotion:N", title="√âmotion")  # Couleur par √©motion
            ).properties(width=700, height=400).interactive()
            st.altair_chart(chart, use_container_width=True)  # Affiche le graphique dans Streamlit
        else:
            st.warning("Aucune √©motion d√©tect√©e √† tracer.")  # Message si aucune √©motion d√©tect√©e

if __name__ == "__main__":
    main()  # Lance l'application Streamlit si le fichier est ex√©cut√© directement